@mixin appearance($appearance) {
  -webkit-appearance: $appearance;
  -moz-appearance: $appearance;
  appearance: $appearance;
}

@mixin clean-tap() {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-touch-callout: none;
  -khtml-user-select: none;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

@mixin animation($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

@mixin background-stretch() {
  background-position: center center;
  // background-attachment: fixed;
  background-repeat: no-repeat;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
}

@mixin box($style: border-box) {
  -webkit-box-sizing: $style;
  -moz-box-sizing: $style;
  box-sizing: $style;
  &:before, &:after {
    -webkit-box-sizing: $style;
    -moz-box-sizing: $style;
    box-sizing: $style;
  }
}

@mixin blur($radius: 5) {
  -webkit-filter: blur($radius + px);
  -moz-filter: blur($radius + px);
  -ms-filter: blur($radius + px);
  -o-filter: blur($radius + px);
  // filter: url(blur.svg#blur);
  // filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius='#{$radius}');
}

@mixin column-count($num: 2) {
  -webkit-column-count: $num;
  -moz-column-count: $num;
  column-count: $num;
  @include column-gap();
}

@mixin column-gap($num: 20px) {
  -webkit-column-gap: $num;
  -moz-column-gap: $num;
  column-gap: $num;
}

@mixin filter($filter) {
  -webkit-filter: $filter;
  -moz-filter: $filter;
  -o-filter: $filter;
  filter: $filter;
}

@mixin flip {
  -moz-transform: scaleX(-1);
  -o-transform: scaleX(-1);
  -webkit-transform: scaleX(-1);
  transform: scaleX(-1);
  filter: FlipH;
  -ms-filter: "FlipH";
}

@mixin selection {
  &::selection {
    @content;
  }

  &::-moz-selection {
    @content;
  }
}

@mixin hyphens {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

@mixin font-smoothing($font-smoothing) {
  -webkit-font-smoothing: antialiased;
  -moz-font-smoothing: antialiased;
  font-smoothing: antialiased;
}

@mixin image($image, $width, $height, $hd: none) {
  background-attachment: top center;
  background-image: url($image);
  background-repeat: no-repeat;
  background-size: $width+px $height+px;
  @if $hd != none {
    @media (min--moz-device-pixel-ratio: 1.3),
           (-o-min-device-pixel-ratio: 2.6/2),
           (-webkit-min-device-pixel-ratio: 1.3),
           (min-device-pixel-ratio: 1.3),
           (min-resolution: 1.3dppx) {
      /* on retina, use image that's scaled by 2 */
      background-image: url($hd);
    }
  }
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

@mixin rounded($size: 5px, $corner: "none") {
  @if $corner == "none" {
    -webkit-border-radius: $size;
    -moz-border-radius: $size;
    border-radius: $size;
  }
  @else {
    -webkit-border-#{$corner}-radius: $size;
    -moz-border-#{$corner}-radius: $size;
    border-#{$corner}-radius: $size;
  }
}

@mixin shadow($style: $shadow) {
  -webkit-box-shadow: $style;
  -moz-box-shadow: $style;
  box-shadow: $style;
}

@mixin text-shadow($style: $shadow) {
  -webkit-text-shadow: $style;
  -moz-text-shadow: $style;
  text-shadow: $style;
}

@mixin transform($transform...) {
  -webkit-transform: $transform;
  -moz-transform: $transform;
  -ms-transform: $transform;
  transform: $transform;
}

@mixin transform-origin($style) {
  -webkit-transform-origin: $style;
  -moz-transform-origin: $style;
  -ms-transform-origin: $style;
  transform-origin: $style;
}

@mixin transition($transition...) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}

@mixin transition-property($property...) {
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
}

@mixin transition-duration($duration...) {
    -moz-transition-property:    $duration;
    -o-transition-property:      $duration;
    -webkit-transition-property: $duration;
    transition-property:         $duration;
}

@mixin transition-timing-function($timing...) {
    -moz-transition-timing-function:    $timing;
    -o-transition-timing-function:      $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function:         $timing;
}

@mixin transition-delay($delay...) {
    -moz-transition-delay:    $delay;
    -o-transition-delay:      $delay;
    -webkit-transition-delay: $delay;
    transition-delay:         $delay;
}

@mixin wordwrap() {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-word;
  white-space: initial !important;
}

@mixin placeholder {

  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

}

// Cross browser flex information here:
// http://stackoverflow.com/questions/13934654/is-there-any-polyfill-for-current-css-flexible-box-layout-module-as-per-w3c-cr

@mixin flex {
  @include justify();
  display: -webkit-box;     // OLD - iOS 6-, Safari 3.1-6
  display: -moz-box;        // OLD - Firefox 19- (buggy but mostly works)
  display: -ms-flexbox;     // TWEENER - IE 10
  display: -webkit-flex;    // NEW - Chrome
  display: flex;
}

@mixin flex-size($size: 1) {
  -webkit-box-flex: $size;  // OLD - iOS 6-, Safari 3.1-6
  -moz-box-flex: $size;     // OLD - Firefox 19-
  // width: 20%;            // For old syntax, otherwise collapses.
  -webkit-flex: $size;      // Chrome
  -ms-flex: $size;          // IE 10
  flex: $size;              // NEW, Spec - Opera 12.1, Firefox 20+
}

@mixin flex-order($order: 1) {
  -webkit-box-ordinal-group: $order;
  -moz-box-ordinal-group: $order;
  -ms-flex-order: $order;
  -webkit-order: $order;
  order: $order;
}

@mixin flex-direction($flow: row) {
  -webkit-flex-direction: $flow;
  -moz-flex-direction: $flow;
  -ms-flex-direction: $flow;
  flex-direction: $flow;
}

@mixin flex-wrap($wrap: wrap) {
  -webkit-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

@mixin align-content($align: center) {
  -webkit-align-content: $align;
  align-content: $align;
  $old: $align;
  @if $align == flex-start {
    $old: start;
  } @else if $align == flex-end {
    $old: end;
  } @else if $align == space-between {
    $old: justify;
  } @else if $align == space-around {
    $old: distribute;
  }
  -ms-flex-line-pack: $old;
  flex-line-pack: $old;
}

@mixin align-items($align: center) {
  -webkit-align-items: $align;
  align-items: $align;
  $old: $align;
  @if $align == flex-start {
    $old: start;
  } @else if $align == flex-end {
    $old: end;
  }
  -ms-flex-align: $old;
  flex-align: $old;
}

@mixin align-self($align: center) {
  -webkit-align-self: $align;
  align-self: $align;
  $old: $align;
  @if $align == flex-start {
    $old: start;
  } @else if $align == flex-end {
    $old: end;
  }
  -ms-flex-item-align: $old;
  flex-item-align: $old;
}

@mixin justify($align: center) {
  -webkit-justify-content: $align;
  -moz-justify-content: $align;
  justify-content: $align;
  $old: $align;
  @if $align == flex-start {
    $old: start;
  } @else if $align == flex-end {
    $old: end;
  } @else if $align == space-between {
    $old: justify;
  } @else if $align == space-around {
    $old: distribute;
  }
  -ms-flex-pack: $old;
  flex-pack: $old;
}

// @include gradient(gradient--concat($gradient--concat));
@mixin gradient($gradient-degrees, $gradient--concat) {
    $ie_variables: gradient--ie($gradient--concat);
    $start-color: map-get($ie_variables, 'start');
    $finish-color: map-get($ie_variables, 'finish');

  // background-color: mix($start-color, $finish-color); /* Fallback */
  background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($start-color), to($finish-color));
  background-image: -webkit-linear-gradient($gradient-degrees, gradient--concat($gradient--concat));
  background-image:    -moz-linear-gradient($gradient-degrees, gradient--concat($gradient--concat));
  background-image:     -ms-linear-gradient($gradient-degrees, gradient--concat($gradient--concat));
  background-image:      -o-linear-gradient($gradient-degrees, gradient--concat($gradient--concat));
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$start-color}', EndColorStr='#{$finish-color}')";
}


// Concat :: Gradient Mixin
// Concatinate the gradient map properties and values into structured CSS
@function gradient--concat($gradient--concat){
    $return-new: '';

    @each $position, $color in $gradient--concat {
        $return: $color + ' ' + $position + gradient--position($position);
        $return-new: $return-new + '' + $return;
    }

    @return unquote($return-new);
}

// Position :: Gradient Mixin
// Add commas to the end of every property concationation, except the last one.
@function gradient--position($position){
    @if ( $position != 100%) {
        @return ",";
    }
    @else {
        @return "";
    }
}

// Internet Explore Fallback
// Extract the first and last color variables for "-ms-filter"
@function gradient--ie($gradient--concat){
    $start_map: '';
    $end_map: '';

    @each $position, $color in $gradient--concat {
        @if ( $position == 0%) {
            $start_map: (
                'start': $color
                )
        }
        @if ( $position == 100%) {
            $end_map: (
                'finish': $color
                )
        }
    }

    @return map-merge($start_map, $end_map)

}
